#include <iostream>
using namespace std;
class Node {
public:
   int data;
   Node* left;
   Node* right;
   Node(int val) {
       data = val;
       left = nullptr;
       right = nullptr;
   }
}
void inorder(Node* root) {
   if (root == nullptr) {
       return;
   }
   inorder(root->left);
   cout << root->data << " ";
   inorder(root->right);
}
void preorder(Node* root) {
   if (root == nullptr) {
       return;
   }
   cout << root->data << " ";
   preorder(root->left);
   preorder(root->right);
}
void postorder(Node* root) {
   if (root == nullptr) {
       return;
   }
   postorder(root->left);
   postorder(root->right);
   cout << root->data << " ";
}
void deleteTree(Node* root) {
   if (root == nullptr) {
       return;
   }
   deleteTree(root->left);
   deleteTree(root->right);
   delete root;
}
int main() {
   Node* root = new Node(1);
   root->left = new Node(2);
   root->right = new Node(3);
   root->left->left = new Node(4);
   root->left->right = new Node(5);
   cout << "Inorder: ";
   inorder(root);
   cout << endl;
   cout << "Preorder: ";
   preorder(root);
   cout << endl;
   cout << "Postorder: ";
   postorder(root);
   cout << endl;
   deleteTree(root);
 return 0;
}
