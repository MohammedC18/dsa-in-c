#include <stdio.h>
#include<stdbool.h>
#define MAX 5
int QUEUE[MAX], REAR = -1, FRONT = -1;
void insertRear();
void deleteFront();
void deleteRear();
void insertFront();
void display();
bool isFull();
bool isEmpty();
int main() {
int choice;
printf("Menu:\n 1. Insert from Rear\n 2. Delete from Front\n 3. Insert from Front\n 4. Delete from Rear\n 5. Display\n 6. Exit\n");


while (true) {
  printf("\nEnter choice: ");
  scanf("%d", &choice);
  switch (choice) {
    case 1:
      insertRear();
      break;
    case 2:
      deleteFront();
      break;
    case 3:
      insertFront();
      break;
    case 4:
      deleteRear();
      break;
    case 5:
      display();
      break;
    case 6:
      printf("Exiting...\n");
      return 0;
    default:
      printf("Invalid choice\n");
  }
}

return 0;
}
bool isFull() {
return (FRONT == 0 && REAR == MAX - 1) || (FRONT == REAR + 1);
}

bool isEmpty() {
return FRONT == -1;
}

void insertRear() {
int a;

if (isFull()) {
  printf("Queue is full\n");
  return;
}

printf("Enter Element: ");
scanf("%d", &a);




if (FRONT == -1) {
  FRONT = REAR = 0;
} else if (REAR == MAX - 1) {
  REAR = 0;
} else {
  REAR++;
}


QUEUE[REAR] = a;
}


void deleteFront() {
if (isEmpty()) {
  printf("Queue Empty\n");
  return;
}




int value = QUEUE[FRONT];
printf("The deleted element from front is: %d\n", value);




if (FRONT == REAR) {
  FRONT = REAR = -1;
} else if (FRONT == MAX - 1) {
  FRONT = 0;
} else {
  FRONT++;
}
}
void deleteRear() {
if (isEmpty()) {
  printf("Queue Empty\n");
  return;
}

int value = QUEUE[REAR];
printf("The deleted element from rear is: %d\n", value);

if (FRONT == REAR) {
  FRONT = REAR = -1;
} else if (REAR == 0) {
  REAR = MAX - 1;
} else {
  REAR--;
}
}
void insertFront() {
int x;

if (isFull()) {
  printf("Queue is full\n");
  return;
}
printf("Enter Element: ");
scanf("%d", &x);
if (FRONT == -1) {
  FRONT = REAR = 0;
} else if (FRONT == 0) {
  FRONT = MAX - 1;
} else {
  FRONT--;
}

QUEUE[FRONT] = x;
}
void display() {
if (isEmpty()) {
  printf("Queue Empty\n");
  return;
}
printf("Printing DeQueue:\n");
int i = FRONT;
while (true) {
  printf("\t%d", QUEUE[i]);
  if (i == REAR) break;
  i = (i + 1) % MAX;
}
printf("\nFRONT: %d, REAR: %d\n", FRONT, REAR);
}
