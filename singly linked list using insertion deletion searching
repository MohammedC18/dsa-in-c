#include <stdio.h>
#include <stdlib.h>


struct node {
   int data;
   struct node *next;
};


struct node *head = NULL;


void insert_beginning(int item) {
   struct node *new_node = (struct node *)malloc(sizeof(struct node));
   new_node->data = item;
   new_node->next = head;
   head = new_node;
   printf("Inserted %d at the beginning.\n", item);
}


void insert_end(int item) {
   struct node *new_node = (struct node *)malloc(sizeof(struct node));
   new_node->data = item;
   new_node->next = NULL;


   if (head == NULL) {
       head = new_node;
   } else {
       struct node *temp = head;
       while (temp->next != NULL) {
           temp = temp->next;
       }
       temp->next = new_node;
   }
   printf("Inserted %d at the end.\n", item);
}


void insert_random(int item, int position) {
   struct node *new_node = (struct node *)malloc(sizeof(struct node));
   new_node->data = item;


   if (position == 0) {
       new_node->next = head;
       head = new_node;
       printf("Inserted %d at position %d.\n", item, position);
       return;
   }


   struct node *temp = head;
   for (int i = 0; i < position - 1; i++) {
       if (temp == NULL) {
           printf("Position out of bounds.\n");
           free(new_node);
           return;
       }
       temp = temp->next;
   }


   if (temp == NULL) {
       printf("Position out of bounds.\n");
       free(new_node);
       return;
   }


   new_node->next = temp->next;
   temp->next = new_node;
   printf("Inserted %d at position %d.\n", item, position);
}


void delete_beginning() {
   if (head == NULL) {
       printf("List is empty.\n");
       return;
   }
   struct node *temp = head;
   head = head->next;
   free(temp);
   printf("Deleted node from the beginning.\n");
}


void delete_end() {
   if (head == NULL) {
       printf("List is empty.\n");
       return;
   }
   if (head->next == NULL) {
       free(head);
       head = NULL;
       printf("Deleted the only node in the list.\n");
       return;
   }


   struct node *temp = head;
   while (temp->next->next != NULL) {
       temp = temp->next;
   }
   free(temp->next);
   temp->next = NULL;
   printf("Deleted node from the end.\n");
}


void display() {
   if (head == NULL) {
       printf("List is empty.\n");
       return;
   }
   struct node *temp = head;
   while (temp != NULL) {
       printf("%d -> ", temp->data);
       temp = temp->next;
   }
   printf("NULL\n");
}


int main() {
   int choice, item, position;


   while (1) {
       printf("\n1. Insert at beginning\n2. Insert at end\n3. Insert at random position\n4. Delete from beginning\n5. Delete from end\n6. Display\n7. Exit\n");
       printf("Enter your choice: ");
       scanf("%d", &choice);


       switch (choice) {
           case 1:
               printf("Enter value to insert at beginning: ");
               scanf("%d", &item);
               insert_beginning(item);
               break;
           case 2:
               printf("Enter value to insert at end: ");
               scanf("%d", &item);
               insert_end(item);
               break;
           case 3:
               printf("Enter value to insert: ");
               scanf("%d", &item);
               printf("Enter position to insert at: ");
               scanf("%d", &position);
               insert_random(item, position);
               break;
           case 4:
               delete_beginning();
               break;
           case 5:
               delete_end();
               break;
           case 6:
               display();
               break;
           case 7:
               exit(0);
           default:
               printf("Invalid choice.\n"); 
          }
      }
   return 0;
 }
